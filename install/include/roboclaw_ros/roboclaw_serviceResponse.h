// Generated by gencpp from file roboclaw_ros/roboclaw_serviceResponse.msg
// DO NOT EDIT!


#ifndef ROBOCLAW_ROS_MESSAGE_ROBOCLAW_SERVICERESPONSE_H
#define ROBOCLAW_ROS_MESSAGE_ROBOCLAW_SERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboclaw_ros
{
template <class ContainerAllocator>
struct roboclaw_serviceResponse_
{
  typedef roboclaw_serviceResponse_<ContainerAllocator> Type;

  roboclaw_serviceResponse_()
    : return_enc(0)  {
    }
  roboclaw_serviceResponse_(const ContainerAllocator& _alloc)
    : return_enc(0)  {
  (void)_alloc;
    }



   typedef int64_t _return_enc_type;
  _return_enc_type return_enc;




  typedef boost::shared_ptr< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct roboclaw_serviceResponse_

typedef ::roboclaw_ros::roboclaw_serviceResponse_<std::allocator<void> > roboclaw_serviceResponse;

typedef boost::shared_ptr< ::roboclaw_ros::roboclaw_serviceResponse > roboclaw_serviceResponsePtr;
typedef boost::shared_ptr< ::roboclaw_ros::roboclaw_serviceResponse const> roboclaw_serviceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboclaw_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbe370e011cd961437352c1017947883";
  }

  static const char* value(const ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbe370e011cd9614ULL;
  static const uint64_t static_value2 = 0x37352c1017947883ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboclaw_ros/roboclaw_serviceResponse";
  }

  static const char* value(const ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 return_enc\n\
\n\
";
  }

  static const char* value(const ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.return_enc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct roboclaw_serviceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboclaw_ros::roboclaw_serviceResponse_<ContainerAllocator>& v)
  {
    s << indent << "return_enc: ";
    Printer<int64_t>::stream(s, indent + "  ", v.return_enc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCLAW_ROS_MESSAGE_ROBOCLAW_SERVICERESPONSE_H
